<?php
/*
 * @file uc_attribute_files.module
 * Provides core hooks etc for the module
 * @copyright Copyright(c) 2011 Doug Logan
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Doug Logan <my first name at dlogan dot com>
 * @author Lee Rowlands contact at rowlandsgroup dot com
 * @todo Organize code into logical sections and write a header for what each function does.
 * @todo Separate Admin functions for an admin include.
 * @todo Fix http://localhost/drupal/?q=node/6/edit/options so notes on use with file upload is output
 * @todo Adjust the price of items in the cart based on the extension of the option chosen
 * @todo Clear cache on permissions and get it working for both view attribute uploads, and view all upload.
 * @todo Track down why getting "Invalid type of order was passed by user" within Watchdog
 * @todo add to cart data
 */

/*******************************************************
 * Constants
 *******************************************************/

define('UC_ATTRIBUTE_FILES_TYPE', 213); //completely random but less likely to cause collisions

/*******************************************************
 * Core Hooks
 *******************************************************/

/**
 * Implements hook_perm
*/
function uc_attribute_files_perm() {
  return array('view all attribute uploads', 'upload attribute files', 'view attribute uploads');
}

/**
 * Implements hook_menu
*/
function uc_attribute_files_menu() {
  $items = array();
  $items['uploads/cart/%'] = array(
    'page callback' => '_uc_attribute_files_download',
    'page arguments' => array(1, 2),
    'file' => 'uc_attribute_files.inc',
    'access callback' => 'uc_attribute_files_user_view_upload_access',
    'type' => MENU_CALLBACK,
  );
  $items['uploads/order/%/%/%'] = array(
    'page callback' => '_uc_attribute_files_download',
    'page arguments' => array(1, 4, 2, 3),
    'access callback' => 'uc_attribute_files_user_view_upload_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter
*/
function uc_attribute_files_menu_alter(&$items) {
  // We take over the menu callback
  $items['admin/store/attributes']['page callback'] = 'uc_attribute_files_admin';
  $items['admin/store/attributes']['file'] = 'uc_attribute_files.inc';
  $items['admin/store/attributes']['module'] = 'uc_attribute_files';
}

/**
 * Implements hook_form_alter
*/
function uc_attribute_files_form_alter(&$form, $form_state, $form_id) {
  global $user;
  if (strpos($form_id, "add_to_cart_form")) {
    if (!empty($form['attributes']) &&
        is_array($form['attributes']) &&
        count($form['attributes']) > 0) {
      foreach ($form['attributes'] as $id => $attribute) {
        if ($form['node']['#value']->attributes[$id]->display == UC_ATTRIBUTE_FILES_TYPE) {
          if (!user_access('upload attribute files')) {
            $form['attributes'][$id]['#type'] = 'value';
            $form['attributes'][$id]['#value'] = '';
            
            if ($attribute['#required']) {
          
              $form['submit']['#attributes']['disabled'] = 'disabled';
              $form['submit']['#title'] = t('You must login to add this to your cart');
              if ($user->uid == 0) {
                $form['uc_attribute_files_login_required']['#value'] = '<div>' . t('Only certain users can add this item to their cart, please !login to see if your account has this permission.', array('!login' => l(t('login'), 'user/login'))) . '</div>';
              }
              else {
                $form['uc_attribute_files_login_required']['#value'] = '<div>' . t('Your user account cannot add this item. Please contact an administrator for assistance.') . '</div>';
              }
            }
          }
          else {
            // Set the form encoding
            if (!empty($form['#attributes'])) {
              $form['#attributes']['enctype'] = "multipart/form-data";
            }
            else {
              $form['#attributes'] = array('enctype' => "multipart/form-data");
            }
            $form['#submit'][] = 'uc_attribute_files_upload_file';
            $form['#validate'][] = 'uc_attribute_files_cart_validate';

            $form['attributes'][$id]['#type'] = 'file';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_cron
*/
function uc_attribute_files_cron() {
  $dir = realpath(variable_get('uc_attribute_files_cart_filepath', NULL) .'/');
  $cart_dirs = array_flip(scandir($dir));
  $result = db_query("SELECT DISTINCT cart_id FROM {uc_cart_products}");
  while ($row = db_fetch_object($result)) {
    unset($cart_dirs[$row->cart_id]);
  }
  unset($cart_dirs['.'], $cart_dirs['..']);
  foreach ($cart_dirs as $id => $jnk) {
    _uc_attribute_files_rrmdir($dir . $id);
  }
}

/**
 * Implements hook_form_FORM_ID_alter
*/
function uc_attribute_files_form_uc_attribute_admin_settings_form_alter(&$form, $form_state) {
  //Remove first form element, and put into array to be used so new form can be inserted before
  //the submit buttons. This essentiall re-orders the form so it doesn't look stupid.
  $uc_attribute_files_form[key($form)] = array_shift($form);
  $uc_attribute_files_form['uc_attribute_files_cart_filepath'] = 
  array(
    '#type' => 'textfield',
    '#title' => t('File path for cart file uploads'),
    '#description' => t('The absolute path (or relative to Drupal root) where files uploaded to a cart for an attribute should be put. For security reasons, it is recommended to choose a path outside the web root.'),
    '#default_value' => variable_get('uc_attribute_files_cart_filepath', NULL),
  );
  $uc_attribute_files_form['uc_attribute_files_order_filepath'] = 
  array(
    '#type' => 'textfield',
    '#title' => t('File path for order files'),
    '#description' => t('The absolute path (or relative to Drupal root) where uploaded files should be moved after a cart becomes an order. For security reasons, it is recommended to choose a path outside the web root.'),
    '#default_value' => variable_get('uc_attribute_files_order_filepath', NULL),
  );
  $uc_attribute_files_form['uc_attribute_files_file_extensions'] = 
  array(
    '#type' => 'textfield',
    '#title' => t('List of file extensions allowed (Use a ; to separate)'),
    '#description' => t('Default list of file extensions for files that can be uploaded. Separate each by a semi-colin (;) or use * as a wild card to allow any file type.<BR>' . 'NOTE: This can be overridden on an attribute by adding an option for each acceptable filetype. If any option is specified on the attribute directly, this setting is ignored for that attribute.'),
    '#default_value' => variable_get('uc_attribute_files_file_extensions', "PDF;JPG;GIF;JPEG;TIFF;BMP"),
  );

  //Takes the above array and inserts it into the beginning of the form array 
  $form = array_merge($uc_attribute_files_form, $form);
  $form['#validate'][] = "uc_attribute_files_admin_validate";
}
  
/**
 * Implements hook_form_FORM_ID_alter
*/
function uc_attribute_files_form_uc_attribute_form_alter(&$form, $form_state) {
  $form['display']['#options'][UC_ATTRIBUTE_FILES_TYPE] = t('File Upload');
}

/**
 * Implements hook_form_FORM_ID_alter
*/
function uc_attribute_files_form_user_login_block_form_alter(&$form, $form_state) {
  //Add Hidden form element to pass old cart id on logon
  #@todo this really belongs in hook_user
  $form['uc_attribute_files_cartid'] = array('#type' => 'value', '#value' => uc_cart_get_id() ); 
  break;
}

/**
 * Implements hook_form_FORM_ID_alter
*/
function uc_attribute_files_form_uc_attribute_options_form_form_alter(&$form, $form_state) {
  if (count($form['#parameters']) < 1) {
    break;
  }
  foreach ($form['#parameters'] as $id => $param) {
    if ($param->display == UC_ATTRIBUTE_FILES_TYPE) {
      $form['uc_attribute_files_notes']['#value'] =
      '<div>' . t('NOTE: Enter file extensions as options above to limit uploads to the file types listed. Enter a * for any file extension. This overrides site defaults.') . '</div>';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter
*/
function uc_attribute_files_form_uc_attribute_option_form_form_alter(&$form, $form_state) {
  if (count($form['#parameters']) < 1) {
    break;
  }

  foreach ($form['#parameters'] as $id => $param) {
    if ($param->display == UC_ATTRIBUTE_FILES_TYPE) {
      $form['name']['#description'] =
      t('The extension of a file type you would like a user to be able to upload. Enter a * for any extension.') . '</div>';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter
*/
function uc_attribute_files_form_uc_object_attributes_form_alter(&$form, $form_state) {
  if (count($form['attributes']) < 1) {
    return;
  }

  foreach ($form['attributes'] as $id => $attribute) {
    $form['attributes'][$id]['display']['#options'][UC_ATTRIBUTE_FILES_TYPE] = t('File Upload');
  }
}

/**
 * Implements hook_user
*/
function uc_attribute_files_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
  case 'login':
    $dir = realpath(variable_get('uc_attribute_files_cart_filepath', NULL));
    uc_attribute_files_move_files($dir . "/" . $edit['uc_attribute_files_cartid'], $dir . '/' . uc_cart_get_id());
    break;
  }
}


/*******************************************************
 * Access callbacks
 *******************************************************/

/**
 * Access callback for viewing/downloading files
*/
function uc_attribute_files_user_view_upload_access() {
  return (user_access('view attribute uploads') || user_access('view all attribute uploads'));
}

/*******************************************************
 * Non core hooks
 *******************************************************/

/**
 * Implements hook_product_description_alter
 * Allows us to render our links as desired
*/
function uc_attribute_files_product_description_alter($item) {
  $item['#post_render'][] = "uc_attribute_files_render_links";
  return $item;
}

/**
 * Implements hook_order
*/
function uc_attribute_files_order($op, &$arg1, $arg2) {
  global $user;
  switch ($op) {
  case 'submit':
    $cart_dir =  variable_get('uc_attribute_files_cart_filepath', NULL) . '/' . uc_cart_get_id();
    $order_dir = variable_get('uc_attribute_files_order_filepath', NULL) . '/' . $user->uid . '/' . $arg1->order_id;
    uc_attribute_files_move_files($cart_dir, $order_dir);
    break;
  }
}
/*******************************************************
 * Module functions
 *******************************************************/
/**
 * Validation function for admin form
*/
function uc_attribute_files_admin_validate($form, &$form_state) {
  $cart_dir = check_plain($form_state['values']['uc_attribute_files_cart_filepath']);
  $order_dir = check_plain($form_state['values']['uc_attribute_files_order_filepath']);
  
  if (!is_dir($cart_dir) && !@mkdir($cart_dir, 0755, TRUE)) { 
    form_set_error('uc_attribute_files_cart_filepath', t('Could not open or create path:') . $cart_dir);
  }

  if (!is_dir($order_dir) && !@mkdir($order_dir, 0755, TRUE)) { 
    form_set_error('uc_attribute_files_order_filepath', t('Could not open or create path:') . $order_dir);
  }
}

/**
 * Validation handler for add to cart form
*/
function uc_attribute_files_cart_validate($form, &$form_state) {
  dsm($form_state);
  dsm($_FILES);
  $cart_id = uc_cart_get_id();

  $uploads_path = variable_get('uc_attribute_files_cart_filepath', NULL);
  if (is_null($uploads_path)) {
    form_set_error('file', t('Upload to directory failed. Please contact an administrator.'));
    return FALSE;
  }
  $upload_dir =  $uploads_path .'/'. $cart_id;

  //Check if folder exists, or create it.
  if (!is_dir($upload_dir) && !@mkdir($upload_dir, 0755, TRUE)) { 
    form_set_error('file', t('Upload to directory failed. Please contact an administrator.'));
    return FALSE;
  }

  //Validate file type & file was uploaded properly
  foreach ($_FILES['files']['name'] as $id => $value) {
    foreach ($form['node']['#value']->attributes as $attribute) {
      if ($attribute->name == $id) {
        //Test to see if there are any options, since they can represent ok file types
        $result = db_query("SELECT name FROM {uc_attribute_options} WHERE aid = %d", $attribute->aid);
        unset($file_types);

        while ($option = db_fetch_object($result)) {
          $file_types[] = strtolower($option->name);
        }
        if (count($file_types) < 1) { //If there are no options, load the default acceptable file types
          $file_types = array_map('strtolower', explode(';', variable_get('uc_attribute_files_file_extensions', NULL)));
        }
        $filename = file_munge_filename($value, "");
        $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
        if (!in_array($ext, $file_types) && !in_array('*', $file_types)) {
          form_set_error($id, t('Sorry, but %label only accepts the following file types: !types', array('%label' => $attribute->label, '!types' => implode(";", $file_types))));
        }
        elseif (intval($_FILES['files']['error'][$id]) !== 0 || intval($_FILES['files']['size'][$id]) < 1 || !@copy($_FILES['files']['tmp_name'][$id], $upload_dir . '/' . $filename)) {
          form_set_error($id, t('!filename: File upload failed for %label.', array('!filename' => $filename, '%lable' => $attribute->label))); 
        }
      }
    }
  }
  return TRUE;
}

/**
 * Submit handler for add to cart
*/
function uc_attribute_files_cart_submit($form, &$form_state) {
  global $user;
  $limits = _upload_file_limits($user);
  $validators = array(
    'file_validate_extensions' => array($limits['extensions']),
    'file_validate_image_resolution' => array($limits['resolution']),
    'file_validate_size' => array($limits['file_size'], $limits['user_size']),
  );
  // Allow other modules to intervene.
  drupal_alter('uc_attribute_files', $validators);
  dsm($validators);
  
  // Save new file uploads.
  foreach ($form_state['values']['attributes'] as $id => $value) {
    if (user_access('upload attribute files') &&
        #@todo use actual filenames and field names
        ($file = file_save_upload('file', $validators, file_create_path('user-files')))) {
      $form_state['values']['attributes'][$id] = $file->fid;
      if ($user->uid != 0) {
        file_set_status($file, FILE_STATUS_PERMANENT);
      }
    }
  }
}

/**
 * Render our links in the appropriate format
 * @todo make this nicer
*/
function uc_attribute_files_render_links($html) {
  preg_match('!\orders?/(\d+)!', $_SERVER[request_uri()], $order);

  if (count($order[1]) > 0) {
    $order_user = db_fetch_object(db_query("SELECT uid FROM {uc_orders} WHERE order_id = %d", $order[1]));
    $uri = 'uploads/order/' . $order_user->uid . '/' . $order[1] . '/';
  }
  else {
    $uri = "uploads/cart/";
  }

  preg_match_all('!\[UC_ATTRIBUTE_FILES\](.*)\[/UC_ATTRIBUTE_FILES\]!U', $html, $links);
  
  for ($x =0; $x < count($links[1]); $x++) {
    $find = $links[0][$x];
    $replace = l($links[1][$x], $uri . $links[1][$x]);
    $html = str_replace($find, $replace, $html ) ."\n";
  }
  return $html;
}

/**
 * Remove directory
 * @todo this should use the core file api
*/
function _uc_attribute_files_rrmdir($dir) {
  if (is_dir($dir)) {
    $objects = scandir($dir);
    foreach ($objects as $object) {
      if ($object != "." && $object != "..") {
        if (filetype($dir . "/" . $object) == "dir") _uc_attribute_files_rrmdir($dir . "/" . $object); else unlink($dir . "/" . $object);
      }
    }
    reset($objects);
    rmdir($dir);
  }
}

/**
 * Utility to move files
 * @todo this should use the core file api
*/
function uc_attribute_files_move_files($old_dir, $new_dir) {
  if (is_dir($old_dir)) {
    if (!is_dir($new_dir) && !@mkdir($new_dir, 0755, TRUE)) {
      return FALSE;
    }
    foreach (scandir($old_dir) as $file) {
      if ($file == '.' || $file == '..') {
        continue;
      }
      @rename($old_dir . '/' . $file, $new_dir . '/' . $file);
    }
    _uc_attribute_files_rrmdir($old_dir);
  }
}

/**
 * @wtf
*/
function uc_attribute_files_preprocess_table(&$variables) {
  print_r("printed");
}

